// Code generated by mockery v2.49.0. DO NOT EDIT.

package rate

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGetter is an autogenerated mock type for the Getter type
type MockGetter struct {
	mock.Mock
}

type MockGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetter) EXPECT() *MockGetter_Expecter {
	return &MockGetter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockGetter) Close() {
	_m.Called()
}

// MockGetter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockGetter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockGetter_Expecter) Close() *MockGetter_Close_Call {
	return &MockGetter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockGetter_Close_Call) Run(run func()) *MockGetter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetter_Close_Call) Return() *MockGetter_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGetter_Close_Call) RunAndReturn(run func()) *MockGetter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: ctx, key, limit
func (_m *MockGetter) GetOrCreate(ctx context.Context, key string, limit Limit) (Limiter, error) {
	ret := _m.Called(ctx, key, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 Limiter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Limit) (Limiter, error)); ok {
		return rf(ctx, key, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, Limit) Limiter); ok {
		r0 = rf(ctx, key, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Limiter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, Limit) error); ok {
		r1 = rf(ctx, key, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetter_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type MockGetter_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - limit Limit
func (_e *MockGetter_Expecter) GetOrCreate(ctx interface{}, key interface{}, limit interface{}) *MockGetter_GetOrCreate_Call {
	return &MockGetter_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", ctx, key, limit)}
}

func (_c *MockGetter_GetOrCreate_Call) Run(run func(ctx context.Context, key string, limit Limit)) *MockGetter_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(Limit))
	})
	return _c
}

func (_c *MockGetter_GetOrCreate_Call) Return(_a0 Limiter, _a1 error) *MockGetter_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetter_GetOrCreate_Call) RunAndReturn(run func(context.Context, string, Limit) (Limiter, error)) *MockGetter_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockGetter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGetter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockGetter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockGetter_Expecter) Name() *MockGetter_Name_Call {
	return &MockGetter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockGetter_Name_Call) Run(run func()) *MockGetter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetter_Name_Call) Return(_a0 string) *MockGetter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetter_Name_Call) RunAndReturn(run func() string) *MockGetter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetter creates a new instance of MockGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetter {
	mock := &MockGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
