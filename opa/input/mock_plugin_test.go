// Code generated by mockery v2.33.0. DO NOT EDIT.

package input

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockPlugin is an autogenerated mock type for the Plugin type
type MockPlugin struct {
	mock.Mock
}

type MockPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlugin) EXPECT() *MockPlugin_Expecter {
	return &MockPlugin_Expecter{mock: &_m.Mock}
}

// GetInputMsg provides a mock function with given fields: ctx, ghe
func (_m *MockPlugin) GetInputMsg(ctx context.Context, ghe GHE) (json.RawMessage, error) {
	ret := _m.Called(ctx, ghe)

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GHE) (json.RawMessage, error)); ok {
		return rf(ctx, ghe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GHE) json.RawMessage); ok {
		r0 = rf(ctx, ghe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GHE) error); ok {
		r1 = rf(ctx, ghe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlugin_GetInputMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInputMsg'
type MockPlugin_GetInputMsg_Call struct {
	*mock.Call
}

// GetInputMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - ghe GHE
func (_e *MockPlugin_Expecter) GetInputMsg(ctx interface{}, ghe interface{}) *MockPlugin_GetInputMsg_Call {
	return &MockPlugin_GetInputMsg_Call{Call: _e.mock.On("GetInputMsg", ctx, ghe)}
}

func (_c *MockPlugin_GetInputMsg_Call) Run(run func(ctx context.Context, ghe GHE)) *MockPlugin_GetInputMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GHE))
	})
	return _c
}

func (_c *MockPlugin_GetInputMsg_Call) Return(_a0 json.RawMessage, _a1 error) *MockPlugin_GetInputMsg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlugin_GetInputMsg_Call) RunAndReturn(run func(context.Context, GHE) (json.RawMessage, error)) *MockPlugin_GetInputMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockPlugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPlugin_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockPlugin_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Name() *MockPlugin_Name_Call {
	return &MockPlugin_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockPlugin_Name_Call) Run(run func()) *MockPlugin_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Name_Call) Return(_a0 string) *MockPlugin_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlugin_Name_Call) RunAndReturn(run func() string) *MockPlugin_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlugin creates a new instance of MockPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlugin {
	mock := &MockPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
