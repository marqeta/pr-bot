// Code generated by mockery v2.33.0. DO NOT EDIT.

package rules

import (
	context "context"

	input "github.com/marqeta/pr-bot/opa/input"
	mock "github.com/stretchr/testify/mock"
)

// MockRules is an autogenerated mock type for the Rules type
type MockRules[T interface{}] struct {
	mock.Mock
}

type MockRules_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockRules[T]) EXPECT() *MockRules_Expecter[T] {
	return &MockRules_Expecter[T]{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields: ctx, module, _a2
func (_m *MockRules[T]) Evaluate(ctx context.Context, module string, _a2 *input.Model) (T, error) {
	ret := _m.Called(ctx, module, _a2)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *input.Model) (T, error)); ok {
		return rf(ctx, module, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *input.Model) T); ok {
		r0 = rf(ctx, module, _a2)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *input.Model) error); ok {
		r1 = rf(ctx, module, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRules_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type MockRules_Evaluate_Call[T interface{}] struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - ctx context.Context
//   - module string
//   - _a2 *input.Model
func (_e *MockRules_Expecter[T]) Evaluate(ctx interface{}, module interface{}, _a2 interface{}) *MockRules_Evaluate_Call[T] {
	return &MockRules_Evaluate_Call[T]{Call: _e.mock.On("Evaluate", ctx, module, _a2)}
}

func (_c *MockRules_Evaluate_Call[T]) Run(run func(ctx context.Context, module string, _a2 *input.Model)) *MockRules_Evaluate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*input.Model))
	})
	return _c
}

func (_c *MockRules_Evaluate_Call[T]) Return(_a0 T, _a1 error) *MockRules_Evaluate_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRules_Evaluate_Call[T]) RunAndReturn(run func(context.Context, string, *input.Model) (T, error)) *MockRules_Evaluate_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockRules creates a new instance of MockRules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRules[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRules[T] {
	mock := &MockRules[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
