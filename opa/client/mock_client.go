// Code generated by mockery v2.33.0. DO NOT EDIT.

package client

import (
	context "context"

	sdk "github.com/open-policy-agent/opa/sdk"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Decision provides a mock function with given fields: ctx, options
func (_m *MockClient) Decision(ctx context.Context, options sdk.DecisionOptions) (*sdk.DecisionResult, error) {
	ret := _m.Called(ctx, options)

	var r0 *sdk.DecisionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sdk.DecisionOptions) (*sdk.DecisionResult, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sdk.DecisionOptions) *sdk.DecisionResult); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.DecisionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sdk.DecisionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Decision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decision'
type MockClient_Decision_Call struct {
	*mock.Call
}

// Decision is a helper method to define mock.On call
//   - ctx context.Context
//   - options sdk.DecisionOptions
func (_e *MockClient_Expecter) Decision(ctx interface{}, options interface{}) *MockClient_Decision_Call {
	return &MockClient_Decision_Call{Call: _e.mock.On("Decision", ctx, options)}
}

func (_c *MockClient_Decision_Call) Run(run func(ctx context.Context, options sdk.DecisionOptions)) *MockClient_Decision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.DecisionOptions))
	})
	return _c
}

func (_c *MockClient_Decision_Call) Return(_a0 *sdk.DecisionResult, _a1 error) *MockClient_Decision_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Decision_Call) RunAndReturn(run func(context.Context, sdk.DecisionOptions) (*sdk.DecisionResult, error)) *MockClient_Decision_Call {
	_c.Call.Return(run)
	return _c
}

// DecisionID provides a mock function with given fields: ctx
func (_m *MockClient) DecisionID(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_DecisionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecisionID'
type MockClient_DecisionID_Call struct {
	*mock.Call
}

// DecisionID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) DecisionID(ctx interface{}) *MockClient_DecisionID_Call {
	return &MockClient_DecisionID_Call{Call: _e.mock.On("DecisionID", ctx)}
}

func (_c *MockClient_DecisionID_Call) Run(run func(ctx context.Context)) *MockClient_DecisionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_DecisionID_Call) Return(_a0 string) *MockClient_DecisionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DecisionID_Call) RunAndReturn(run func(context.Context) string) *MockClient_DecisionID_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields: module, rule
func (_m *MockClient) Path(module string, rule string) string {
	ret := _m.Called(module, rule)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(module, rule)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockClient_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
//   - module string
//   - rule string
func (_e *MockClient_Expecter) Path(module interface{}, rule interface{}) *MockClient_Path_Call {
	return &MockClient_Path_Call{Call: _e.mock.On("Path", module, rule)}
}

func (_c *MockClient_Path_Call) Run(run func(module string, rule string)) *MockClient_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_Path_Call) Return(_a0 string) *MockClient_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Path_Call) RunAndReturn(run func(string, string) string) *MockClient_Path_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
