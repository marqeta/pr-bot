// Code generated by mockery v2.49.0. DO NOT EDIT.

package datastore

import (
	context "context"
	http "net/http"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockDao is an autogenerated mock type for the Dao type
type MockDao struct {
	mock.Mock
}

type MockDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDao) EXPECT() *MockDao_Expecter {
	return &MockDao_Expecter{mock: &_m.Mock}
}

// GetPayload provides a mock function with given fields: ctx, m
func (_m *MockDao) GetPayload(ctx context.Context, m *Metadata) (json.RawMessage, error) {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for GetPayload")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Metadata) (json.RawMessage, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Metadata) json.RawMessage); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Metadata) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDao_GetPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayload'
type MockDao_GetPayload_Call struct {
	*mock.Call
}

// GetPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - m *Metadata
func (_e *MockDao_Expecter) GetPayload(ctx interface{}, m interface{}) *MockDao_GetPayload_Call {
	return &MockDao_GetPayload_Call{Call: _e.mock.On("GetPayload", ctx, m)}
}

func (_c *MockDao_GetPayload_Call) Run(run func(ctx context.Context, m *Metadata)) *MockDao_GetPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Metadata))
	})
	return _c
}

func (_c *MockDao_GetPayload_Call) Return(_a0 json.RawMessage, _a1 error) *MockDao_GetPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDao_GetPayload_Call) RunAndReturn(run func(context.Context, *Metadata) (json.RawMessage, error)) *MockDao_GetPayload_Call {
	_c.Call.Return(run)
	return _c
}

// StorePayload provides a mock function with given fields: ctx, m, payload
func (_m *MockDao) StorePayload(ctx context.Context, m *Metadata, payload json.RawMessage) error {
	ret := _m.Called(ctx, m, payload)

	if len(ret) == 0 {
		panic("no return value specified for StorePayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Metadata, json.RawMessage) error); ok {
		r0 = rf(ctx, m, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDao_StorePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorePayload'
type MockDao_StorePayload_Call struct {
	*mock.Call
}

// StorePayload is a helper method to define mock.On call
//   - ctx context.Context
//   - m *Metadata
//   - payload json.RawMessage
func (_e *MockDao_Expecter) StorePayload(ctx interface{}, m interface{}, payload interface{}) *MockDao_StorePayload_Call {
	return &MockDao_StorePayload_Call{Call: _e.mock.On("StorePayload", ctx, m, payload)}
}

func (_c *MockDao_StorePayload_Call) Run(run func(ctx context.Context, m *Metadata, payload json.RawMessage)) *MockDao_StorePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Metadata), args[2].(json.RawMessage))
	})
	return _c
}

func (_c *MockDao_StorePayload_Call) Return(_a0 error) *MockDao_StorePayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDao_StorePayload_Call) RunAndReturn(run func(context.Context, *Metadata, json.RawMessage) error) *MockDao_StorePayload_Call {
	_c.Call.Return(run)
	return _c
}

// ToMetadata provides a mock function with given fields: ctx, r
func (_m *MockDao) ToMetadata(ctx context.Context, r *http.Request) (*Metadata, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for ToMetadata")
	}

	var r0 *Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (*Metadata, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *Metadata); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDao_ToMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToMetadata'
type MockDao_ToMetadata_Call struct {
	*mock.Call
}

// ToMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - r *http.Request
func (_e *MockDao_Expecter) ToMetadata(ctx interface{}, r interface{}) *MockDao_ToMetadata_Call {
	return &MockDao_ToMetadata_Call{Call: _e.mock.On("ToMetadata", ctx, r)}
}

func (_c *MockDao_ToMetadata_Call) Run(run func(ctx context.Context, r *http.Request)) *MockDao_ToMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockDao_ToMetadata_Call) Return(_a0 *Metadata, _a1 error) *MockDao_ToMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDao_ToMetadata_Call) RunAndReturn(run func(context.Context, *http.Request) (*Metadata, error)) *MockDao_ToMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDao creates a new instance of MockDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDao {
	mock := &MockDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
