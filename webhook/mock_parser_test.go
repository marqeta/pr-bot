// Code generated by mockery v2.33.0. DO NOT EDIT.

package webhook

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseWebHook provides a mock function with given fields: messageType, payload
func (_m *MockParser) ParseWebHook(messageType string, payload []byte) (interface{}, error) {
	ret := _m.Called(messageType, payload)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (interface{}, error)); ok {
		return rf(messageType, payload)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) interface{}); ok {
		r0 = rf(messageType, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(messageType, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseWebHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseWebHook'
type MockParser_ParseWebHook_Call struct {
	*mock.Call
}

// ParseWebHook is a helper method to define mock.On call
//   - messageType string
//   - payload []byte
func (_e *MockParser_Expecter) ParseWebHook(messageType interface{}, payload interface{}) *MockParser_ParseWebHook_Call {
	return &MockParser_ParseWebHook_Call{Call: _e.mock.On("ParseWebHook", messageType, payload)}
}

func (_c *MockParser_ParseWebHook_Call) Run(run func(messageType string, payload []byte)) *MockParser_ParseWebHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockParser_ParseWebHook_Call) Return(_a0 interface{}, _a1 error) *MockParser_ParseWebHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_ParseWebHook_Call) RunAndReturn(run func(string, []byte) (interface{}, error)) *MockParser_ParseWebHook_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePayload provides a mock function with given fields: r, secretToken
func (_m *MockParser) ValidatePayload(r *http.Request, secretToken []byte) ([]byte, error) {
	ret := _m.Called(r, secretToken)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, []byte) ([]byte, error)); ok {
		return rf(r, secretToken)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, []byte) []byte); ok {
		r0 = rf(r, secretToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, []byte) error); ok {
		r1 = rf(r, secretToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ValidatePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePayload'
type MockParser_ValidatePayload_Call struct {
	*mock.Call
}

// ValidatePayload is a helper method to define mock.On call
//   - r *http.Request
//   - secretToken []byte
func (_e *MockParser_Expecter) ValidatePayload(r interface{}, secretToken interface{}) *MockParser_ValidatePayload_Call {
	return &MockParser_ValidatePayload_Call{Call: _e.mock.On("ValidatePayload", r, secretToken)}
}

func (_c *MockParser_ValidatePayload_Call) Run(run func(r *http.Request, secretToken []byte)) *MockParser_ValidatePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].([]byte))
	})
	return _c
}

func (_c *MockParser_ValidatePayload_Call) Return(payload []byte, err error) *MockParser_ValidatePayload_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockParser_ValidatePayload_Call) RunAndReturn(run func(*http.Request, []byte) ([]byte, error)) *MockParser_ValidatePayload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
