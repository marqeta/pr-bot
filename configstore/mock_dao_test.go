// Code generated by mockery v2.49.0. DO NOT EDIT.

package configstore

import mock "github.com/stretchr/testify/mock"

// MockDao is an autogenerated mock type for the Dao type
type MockDao[T DynamicConfig] struct {
	mock.Mock
}

type MockDao_Expecter[T DynamicConfig] struct {
	mock *mock.Mock
}

func (_m *MockDao[T]) EXPECT() *MockDao_Expecter[T] {
	return &MockDao_Expecter[T]{mock: &_m.Mock}
}

// GetItem provides a mock function with given fields: key, table
func (_m *MockDao[T]) GetItem(key string, table string) (T, error) {
	ret := _m.Called(key, table)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (T, error)); ok {
		return rf(key, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) T); ok {
		r0 = rf(key, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDao_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockDao_GetItem_Call[T DynamicConfig] struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - key string
//   - table string
func (_e *MockDao_Expecter[T]) GetItem(key interface{}, table interface{}) *MockDao_GetItem_Call[T] {
	return &MockDao_GetItem_Call[T]{Call: _e.mock.On("GetItem", key, table)}
}

func (_c *MockDao_GetItem_Call[T]) Run(run func(key string, table string)) *MockDao_GetItem_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDao_GetItem_Call[T]) Return(_a0 T, _a1 error) *MockDao_GetItem_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDao_GetItem_Call[T]) RunAndReturn(run func(string, string) (T, error)) *MockDao_GetItem_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockDao creates a new instance of MockDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDao[T DynamicConfig](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDao[T] {
	mock := &MockDao[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
