// Code generated by mockery v2.49.0. DO NOT EDIT.

package review

import (
	context "context"

	dynamolock "cirello.io/dynamolock/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockLocker is an autogenerated mock type for the Locker type
type MockLocker struct {
	mock.Mock
}

type MockLocker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocker) EXPECT() *MockLocker_Expecter {
	return &MockLocker_Expecter{mock: &_m.Mock}
}

// AcquireLockWithContext provides a mock function with given fields: ctx, key, opts
func (_m *MockLocker) AcquireLockWithContext(ctx context.Context, key string, opts ...dynamolock.AcquireLockOption) (*dynamolock.Lock, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLockWithContext")
	}

	var r0 *dynamolock.Lock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...dynamolock.AcquireLockOption) (*dynamolock.Lock, error)); ok {
		return rf(ctx, key, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...dynamolock.AcquireLockOption) *dynamolock.Lock); ok {
		r0 = rf(ctx, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamolock.Lock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...dynamolock.AcquireLockOption) error); ok {
		r1 = rf(ctx, key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocker_AcquireLockWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireLockWithContext'
type MockLocker_AcquireLockWithContext_Call struct {
	*mock.Call
}

// AcquireLockWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opts ...dynamolock.AcquireLockOption
func (_e *MockLocker_Expecter) AcquireLockWithContext(ctx interface{}, key interface{}, opts ...interface{}) *MockLocker_AcquireLockWithContext_Call {
	return &MockLocker_AcquireLockWithContext_Call{Call: _e.mock.On("AcquireLockWithContext",
		append([]interface{}{ctx, key}, opts...)...)}
}

func (_c *MockLocker_AcquireLockWithContext_Call) Run(run func(ctx context.Context, key string, opts ...dynamolock.AcquireLockOption)) *MockLocker_AcquireLockWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]dynamolock.AcquireLockOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(dynamolock.AcquireLockOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLocker_AcquireLockWithContext_Call) Return(_a0 *dynamolock.Lock, _a1 error) *MockLocker_AcquireLockWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocker_AcquireLockWithContext_Call) RunAndReturn(run func(context.Context, string, ...dynamolock.AcquireLockOption) (*dynamolock.Lock, error)) *MockLocker_AcquireLockWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseLockWithContext provides a mock function with given fields: ctx, lockItem, opts
func (_m *MockLocker) ReleaseLockWithContext(ctx context.Context, lockItem *dynamolock.Lock, opts ...dynamolock.ReleaseLockOption) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, lockItem)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLockWithContext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamolock.Lock, ...dynamolock.ReleaseLockOption) (bool, error)); ok {
		return rf(ctx, lockItem, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamolock.Lock, ...dynamolock.ReleaseLockOption) bool); ok {
		r0 = rf(ctx, lockItem, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamolock.Lock, ...dynamolock.ReleaseLockOption) error); ok {
		r1 = rf(ctx, lockItem, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocker_ReleaseLockWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseLockWithContext'
type MockLocker_ReleaseLockWithContext_Call struct {
	*mock.Call
}

// ReleaseLockWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - lockItem *dynamolock.Lock
//   - opts ...dynamolock.ReleaseLockOption
func (_e *MockLocker_Expecter) ReleaseLockWithContext(ctx interface{}, lockItem interface{}, opts ...interface{}) *MockLocker_ReleaseLockWithContext_Call {
	return &MockLocker_ReleaseLockWithContext_Call{Call: _e.mock.On("ReleaseLockWithContext",
		append([]interface{}{ctx, lockItem}, opts...)...)}
}

func (_c *MockLocker_ReleaseLockWithContext_Call) Run(run func(ctx context.Context, lockItem *dynamolock.Lock, opts ...dynamolock.ReleaseLockOption)) *MockLocker_ReleaseLockWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]dynamolock.ReleaseLockOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(dynamolock.ReleaseLockOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamolock.Lock), variadicArgs...)
	})
	return _c
}

func (_c *MockLocker_ReleaseLockWithContext_Call) Return(_a0 bool, _a1 error) *MockLocker_ReleaseLockWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocker_ReleaseLockWithContext_Call) RunAndReturn(run func(context.Context, *dynamolock.Lock, ...dynamolock.ReleaseLockOption) (bool, error)) *MockLocker_ReleaseLockWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocker creates a new instance of MockLocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocker {
	mock := &MockLocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
