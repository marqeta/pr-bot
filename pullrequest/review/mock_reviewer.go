// Code generated by mockery v2.33.0. DO NOT EDIT.

package review

import (
	context "context"

	id "github.com/marqeta/pr-bot/id"
	mock "github.com/stretchr/testify/mock"
)

// MockReviewer is an autogenerated mock type for the Reviewer type
type MockReviewer struct {
	mock.Mock
}

type MockReviewer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReviewer) EXPECT() *MockReviewer_Expecter {
	return &MockReviewer_Expecter{mock: &_m.Mock}
}

// Approve provides a mock function with given fields: ctx, _a1, body, opts
func (_m *MockReviewer) Approve(ctx context.Context, _a1 id.PR, body string, opts ApproveOptions) error {
	ret := _m.Called(ctx, _a1, body, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, id.PR, string, ApproveOptions) error); ok {
		r0 = rf(ctx, _a1, body, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReviewer_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type MockReviewer_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 id.PR
//   - body string
//   - opts ApproveOptions
func (_e *MockReviewer_Expecter) Approve(ctx interface{}, _a1 interface{}, body interface{}, opts interface{}) *MockReviewer_Approve_Call {
	return &MockReviewer_Approve_Call{Call: _e.mock.On("Approve", ctx, _a1, body, opts)}
}

func (_c *MockReviewer_Approve_Call) Run(run func(ctx context.Context, _a1 id.PR, body string, opts ApproveOptions)) *MockReviewer_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(id.PR), args[2].(string), args[3].(ApproveOptions))
	})
	return _c
}

func (_c *MockReviewer_Approve_Call) Return(_a0 error) *MockReviewer_Approve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReviewer_Approve_Call) RunAndReturn(run func(context.Context, id.PR, string, ApproveOptions) error) *MockReviewer_Approve_Call {
	_c.Call.Return(run)
	return _c
}

// Comment provides a mock function with given fields: ctx, _a1, body
func (_m *MockReviewer) Comment(ctx context.Context, _a1 id.PR, body string) error {
	ret := _m.Called(ctx, _a1, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, id.PR, string) error); ok {
		r0 = rf(ctx, _a1, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReviewer_Comment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Comment'
type MockReviewer_Comment_Call struct {
	*mock.Call
}

// Comment is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 id.PR
//   - body string
func (_e *MockReviewer_Expecter) Comment(ctx interface{}, _a1 interface{}, body interface{}) *MockReviewer_Comment_Call {
	return &MockReviewer_Comment_Call{Call: _e.mock.On("Comment", ctx, _a1, body)}
}

func (_c *MockReviewer_Comment_Call) Run(run func(ctx context.Context, _a1 id.PR, body string)) *MockReviewer_Comment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(id.PR), args[2].(string))
	})
	return _c
}

func (_c *MockReviewer_Comment_Call) Return(_a0 error) *MockReviewer_Comment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReviewer_Comment_Call) RunAndReturn(run func(context.Context, id.PR, string) error) *MockReviewer_Comment_Call {
	_c.Call.Return(run)
	return _c
}

// RequestChanges provides a mock function with given fields: ctx, _a1, body
func (_m *MockReviewer) RequestChanges(ctx context.Context, _a1 id.PR, body string) error {
	ret := _m.Called(ctx, _a1, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, id.PR, string) error); ok {
		r0 = rf(ctx, _a1, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReviewer_RequestChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestChanges'
type MockReviewer_RequestChanges_Call struct {
	*mock.Call
}

// RequestChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 id.PR
//   - body string
func (_e *MockReviewer_Expecter) RequestChanges(ctx interface{}, _a1 interface{}, body interface{}) *MockReviewer_RequestChanges_Call {
	return &MockReviewer_RequestChanges_Call{Call: _e.mock.On("RequestChanges", ctx, _a1, body)}
}

func (_c *MockReviewer_RequestChanges_Call) Run(run func(ctx context.Context, _a1 id.PR, body string)) *MockReviewer_RequestChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(id.PR), args[2].(string))
	})
	return _c
}

func (_c *MockReviewer_RequestChanges_Call) Return(_a0 error) *MockReviewer_RequestChanges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReviewer_RequestChanges_Call) RunAndReturn(run func(context.Context, id.PR, string) error) *MockReviewer_RequestChanges_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReviewer creates a new instance of MockReviewer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReviewer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReviewer {
	mock := &MockReviewer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
