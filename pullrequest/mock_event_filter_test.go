// Code generated by mockery v2.33.0. DO NOT EDIT.

package pullrequest

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	id "github.com/marqeta/pr-bot/id"
)

// MockEventFilter is an autogenerated mock type for the EventFilter type
type MockEventFilter struct {
	mock.Mock
}

type MockEventFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventFilter) EXPECT() *MockEventFilter_Expecter {
	return &MockEventFilter_Expecter{mock: &_m.Mock}
}

// ShouldHandle provides a mock function with given fields: ctx, _a1
func (_m *MockEventFilter) ShouldHandle(ctx context.Context, _a1 id.PR) (bool, error) {
	ret := _m.Called(ctx, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, id.PR) (bool, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, id.PR) bool); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, id.PR) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventFilter_ShouldHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldHandle'
type MockEventFilter_ShouldHandle_Call struct {
	*mock.Call
}

// ShouldHandle is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 id.PR
func (_e *MockEventFilter_Expecter) ShouldHandle(ctx interface{}, _a1 interface{}) *MockEventFilter_ShouldHandle_Call {
	return &MockEventFilter_ShouldHandle_Call{Call: _e.mock.On("ShouldHandle", ctx, _a1)}
}

func (_c *MockEventFilter_ShouldHandle_Call) Run(run func(ctx context.Context, _a1 id.PR)) *MockEventFilter_ShouldHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(id.PR))
	})
	return _c
}

func (_c *MockEventFilter_ShouldHandle_Call) Return(_a0 bool, _a1 error) *MockEventFilter_ShouldHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventFilter_ShouldHandle_Call) RunAndReturn(run func(context.Context, id.PR) (bool, error)) *MockEventFilter_ShouldHandle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventFilter creates a new instance of MockEventFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventFilter {
	mock := &MockEventFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
