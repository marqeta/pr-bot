// Code generated by mockery v2.33.0. DO NOT EDIT.

package pullrequest

import (
	context "context"

	github "github.com/google/go-github/v50/github"
	mock "github.com/stretchr/testify/mock"
)

// MockDispatcher is an autogenerated mock type for the Dispatcher type
type MockDispatcher struct {
	mock.Mock
}

type MockDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDispatcher) EXPECT() *MockDispatcher_Expecter {
	return &MockDispatcher_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, deliveryID, eventName, event
func (_m *MockDispatcher) Dispatch(ctx context.Context, deliveryID string, eventName string, event *github.PullRequestEvent) error {
	ret := _m.Called(ctx, deliveryID, eventName, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestEvent) error); ok {
		r0 = rf(ctx, deliveryID, eventName, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDispatcher_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type MockDispatcher_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - deliveryID string
//   - eventName string
//   - event *github.PullRequestEvent
func (_e *MockDispatcher_Expecter) Dispatch(ctx interface{}, deliveryID interface{}, eventName interface{}, event interface{}) *MockDispatcher_Dispatch_Call {
	return &MockDispatcher_Dispatch_Call{Call: _e.mock.On("Dispatch", ctx, deliveryID, eventName, event)}
}

func (_c *MockDispatcher_Dispatch_Call) Run(run func(ctx context.Context, deliveryID string, eventName string, event *github.PullRequestEvent)) *MockDispatcher_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.PullRequestEvent))
	})
	return _c
}

func (_c *MockDispatcher_Dispatch_Call) Return(_a0 error) *MockDispatcher_Dispatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDispatcher_Dispatch_Call) RunAndReturn(run func(context.Context, string, string, *github.PullRequestEvent) error) *MockDispatcher_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDispatcher creates a new instance of MockDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDispatcher {
	mock := &MockDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
